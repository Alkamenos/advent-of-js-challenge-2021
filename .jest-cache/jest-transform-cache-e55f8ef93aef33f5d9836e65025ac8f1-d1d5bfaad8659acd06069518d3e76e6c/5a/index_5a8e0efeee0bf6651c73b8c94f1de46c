b604717043c08f68c7e153a09b3416d2
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _gear = _interopRequireDefault(require("../../../public/images/gear.svg"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _classnames = _interopRequireDefault(require("classnames"));

require("./index.css");

require("./App.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function PomodoroTimer() {
  var audioEl = (0, _react.useRef)();

  var _useState = (0, _react.useState)(25 * 1000 * 60),
      _useState2 = _slicedToArray(_useState, 2),
      time = _useState2[0],
      setTime = _useState2[1];

  var _useState3 = (0, _react.useState)(time),
      _useState4 = _slicedToArray(_useState3, 2),
      currentTime = _useState4[0],
      setCurrentTime = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isRunning = _useState6[0],
      setIsRunning = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = _slicedToArray(_useState7, 2),
      isRest = _useState8[0],
      setIsRest = _useState8[1];

  var _useState9 = (0, _react.useState)(false),
      _useState10 = _slicedToArray(_useState9, 2),
      isPopupOpen = _useState10[0],
      setPopupOpen = _useState10[1];

  var intervals = [{
    isRest: true,
    duration: 5 * 1000 * 60
  }, {
    isRest: true,
    duration: 15 * 1000 * 60
  }, {
    isRest: false,
    duration: 25 * 1000 * 60
  }];
  var timer;

  var toggleRunStop = function toggleRunStop() {
    setIsRunning(!isRunning);
  };

  var toggleSettingsOpen = function toggleSettingsOpen() {
    setPopupOpen(!isPopupOpen);
  };

  var updateTime = function updateTime(interval) {
    return function () {
      setCurrentTime(interval.duration);
      setIsRunning(false);
      setIsRest(interval.isRest);
      setTime(interval.duration);
      setPopupOpen(false);
    };
  };

  var startInterval = function startInterval() {
    if (!timer) {
      timer = setInterval(function () {
        setCurrentTime(function (time) {
          return time - 1000;
        });
      }, 1000);
    }
  };

  if (isRunning && currentTime <= 0) {
    clearInterval(timer);
    setIsRunning(false);
    setCurrentTime(time);
    audioEl.current.play();
  }

  (0, _react.useEffect)(function () {
    console.log(isRunning);

    if (isRunning) {
      startInterval();
    } else {
      clearInterval(timer);
    }

    return function () {
      clearInterval(timer);
    };
  }, [isRunning]);
  var r = 255;
  var progress = currentTime / time * 1595;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "App"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "Pomodoro-timer"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])("Pomodoro-timer__progress", isRest ? "_green" : "_red")
  }, /*#__PURE__*/_react["default"].createElement("svg", {
    height: r * 2 + 10,
    viewBox: "0 0 ".concat(r * 2 + 10, " ").concat(r * 2 + 10),
    width: r * 2 + 10
  }, /*#__PURE__*/_react["default"].createElement("path", {
    d: "M".concat(r + 4, " 4 a ").concat(r, " ").concat(r, " 0 0 1 0 ").concat(r * 2, " a ").concat(r, " ").concat(r, " 0 0 1 0 -").concat(r * 2),
    strokeDasharray: "1595,1595",
    strokeDashoffset: progress
  }))), /*#__PURE__*/_react["default"].createElement("div", {
    className: "Pomodoro-timer__body"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "Pomodoro-timer__content"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "Pomodoro-timer__time"
  }, (0, _dayjs["default"])(currentTime).format("mm:ss")), /*#__PURE__*/_react["default"].createElement("div", {
    className: "Pomodoro-timer__controls"
  }, /*#__PURE__*/_react["default"].createElement("button", {
    className: "Settings-button",
    onClick: toggleRunStop
  }, isRunning ? "stop" : "start"), /*#__PURE__*/_react["default"].createElement("button", {
    className: "Settings-button",
    onClick: toggleSettingsOpen
  }, /*#__PURE__*/_react["default"].createElement("img", {
    alt: "Settings",
    src: _gear["default"]
  })), isPopupOpen && /*#__PURE__*/_react["default"].createElement("ul", {
    className: "Pomodoro-timer__popup"
  }, intervals.map(function (interval) {
    return /*#__PURE__*/_react["default"].createElement("li", {
      key: interval.duration,
      onClick: updateTime(interval)
    }, interval.isRest ? "Rest" : "Work", " ", (0, _dayjs["default"])(interval.duration).format("mm"), " min");
  })))))), /*#__PURE__*/_react["default"].createElement("audio", {
    src: "",
    ref: audioEl
  }));
}

PomodoroTimer.propTypes = {};
PomodoroTimer.defaultProps = {};
var _default = PomodoroTimer;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,