{"version":3,"sources":["index.js"],"names":["PomodoroTimer","audioEl","time","setTime","currentTime","setCurrentTime","isRunning","setIsRunning","isRest","setIsRest","isPopupOpen","setPopupOpen","intervals","duration","timer","toggleRunStop","toggleSettingsOpen","updateTime","interval","startInterval","setInterval","clearInterval","current","play","console","log","r","progress","format","settingsIcon","map","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport settingsIcon from '../../../public/images/gear.svg'\nimport { useEffect, useRef, useState} from \"react\";\nimport dayjs from \"dayjs\";\nimport classnames from \"classnames\";\nimport \"./index.css\"\nimport \"./App.css\"\n\nfunction PomodoroTimer() {\n    const audioEl = useRef();\n    const [time, setTime] = useState(25 * 1000 * 60)\n    const [currentTime, setCurrentTime] = useState(time);\n    const [isRunning, setIsRunning] = useState(false);\n    const [isRest, setIsRest] = useState(false);\n    const [isPopupOpen, setPopupOpen] = useState(false);\n    const intervals = [\n        {isRest: true, duration: 5 * 1000 * 60},\n        {isRest: true, duration: 15 * 1000 * 60},\n        {isRest: false, duration: 25 * 1000 * 60}\n    ];\n\n    let timer;\n    const toggleRunStop = () => {\n        setIsRunning(!isRunning)\n    }\n\n    const toggleSettingsOpen = () => {\n        setPopupOpen(!isPopupOpen)\n    }\n\n    const updateTime = (interval) => () => {\n        setCurrentTime(interval.duration)\n        setIsRunning(false)\n        setIsRest(interval.isRest)\n        setTime(interval.duration)\n        setPopupOpen(false)\n    }\n\n    const startInterval = () => {\n        if (!timer) {\n            timer = setInterval(() => {\n                setCurrentTime(((time) => time - 1000))\n            }, 1000)\n        }\n    }\n\n\n    if (isRunning && currentTime <= 0) {\n        clearInterval(timer)\n        setIsRunning(false);\n        setCurrentTime(time);\n        audioEl.current.play();\n    }\n\n    useEffect(() => {\n        console.log(isRunning)\n        if (isRunning) {\n            startInterval();\n        } else {\n\n            clearInterval(timer)\n\n        }\n        return () => {\n            clearInterval(timer)\n        }\n    }, [isRunning])\n\n\n    const r = 255\n    const progress = currentTime / time * 1595\n\n    return (\n        <div className=\"App\">\n            <div className=\"Pomodoro-timer\">\n                <div className={classnames(\"Pomodoro-timer__progress\", isRest ? \"_green\" : \"_red\")}>\n                    <svg height={r * 2 + 10} viewBox={`0 0 ${r * 2 + 10} ${r * 2 + 10}`} width={r * 2 + 10}>\n                        <path d={`M${r + 4} 4 a ${r} ${r} 0 0 1 0 ${r * 2} a ${r} ${r} 0 0 1 0 -${r * 2}`}\n                              strokeDasharray=\"1595,1595\"\n                              strokeDashoffset={progress}\n                        />\n                    </svg>\n                </div>\n                <div className=\"Pomodoro-timer__body\">\n                    <div className=\"Pomodoro-timer__content\">\n                        <div className=\"Pomodoro-timer__time\">\n                            {dayjs(currentTime).format(\"mm:ss\")}\n                        </div>\n                        <div className=\"Pomodoro-timer__controls\">\n                            <button className=\"Settings-button\" onClick={toggleRunStop}>\n                                {isRunning ? \"stop\" : \"start\"}\n                            </button>\n\n                            <button className=\"Settings-button\" onClick={toggleSettingsOpen}>\n                                <img alt=\"Settings\" src={settingsIcon}/>\n                            </button>\n                            {isPopupOpen && <ul className=\"Pomodoro-timer__popup\">\n                                {intervals.map(interval => (\n                                    <li key={interval.duration}\n                                        onClick={updateTime(interval)}>\n                                        {interval.isRest ? \"Rest\" : \"Work\"} {dayjs(interval.duration).format(\"mm\")} min\n                                    </li>))}\n                            </ul>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <audio src={\"\"} ref={audioEl}/>\n        </div>\n    );\n}\n\nPomodoroTimer.propTypes = {\n};\n\nPomodoroTimer.defaultProps = {\n};\n\nexport default PomodoroTimer;\n"]}